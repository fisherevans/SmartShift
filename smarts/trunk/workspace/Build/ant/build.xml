<project name="Build" default="tomcat-deploy" basedir="..">
  <property file="ant/ant.properties" />
  <property name="project.name" value="api" />

  <property name="war.file" value="smarts-${project.name}.war" />
  <property name="war.path" value="${dist.dir}/${war.file}" />
  <property name="war.abs.path" location="${war.path}" />

  <path id="classpath">
    <fileset dir="${lib.dir}/jar">
      <include name="*.jar" />
    </fileset>
  </path>

  <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask">
    <classpath refid="classpath" />
  </taskdef>
  <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask">
    <classpath refid="classpath" />
  </taskdef>
  <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask">
    <classpath refid="classpath" />
  </taskdef>

  <target name="build-clean">
    <echo>Cleaning the build directory</echo>
    <delete dir="${out.dir}" />
  </target>

  <target name="prep-api">
    <echo>Creating the required property file for API builds</echo>
    <echo message="project.name=api" file="${out.dir.specialprops}" />
  </target>
  <target name="prep-notifications">
    <echo>Creating the required property file for Notification builds</echo>
    <echo message="project.name=notifications" file="${out.dir.specialprops}" />
  </target>

  <target name="build-init">
  	<fail message="Project name is not set. Run a prep target!">
  	  <condition>
  	    <or>
  	      <equals arg1="${project.name}" arg2=""/>
  	    <not>
  	      <isset property="project.name"/>
  	    </not>
  	    </or>
  	  </condition>
  	</fail>
    <echo>Creating the base WAR folder structure</echo>
    <delete dir="${build.dir}/${project.name}" />
    <copy todir="${build.dir}/${project.name}">
      <fileset dir="${conf.dir}/web/${project.name}" />
    </copy>
  	<mkdir dir="${build.dir}/${project.name}/WEB-INF/classes" />
  	<mkdir dir="${build.dir}/${project.name}/WEB-INF/classes/res" />
  	<mkdir dir="${build.dir}/${project.name}/WEB-INF/lib" />
  </target>

  <target name="build-compile" depends="build-init">
    <echo>Compiling the java files</echo>
    <javac destdir="${build.dir}/${project.name}/WEB-INF/classes" verbose="false" debug="${build.debug}" debuglevel="lines,vars,source">
      <classpath refid="classpath" />
      <src path="${src.dir.common}" />  
      <src path="${src.prefix}${project.name}" />
    </javac>
  </target>

  <target name="build-package" depends="build-compile">
    <echo>Packaging required files into the build directory</echo>
    <copy todir="${build.dir}/${project.name}/WEB-INF/classes">
      <fileset dir="${conf.dir}/hibernate" />
      <fileset dir="${conf.dir}/log4j" />
    </copy>
    <copy todir="${build.dir}/${project.name}/WEB-INF/lib">
      <fileset dir="${lib.dir}/jar">
        <exclude name="javax.servlet.jar" />
        <exclude name="servlet-api.jar" />
      </fileset>
    </copy>
    <copy todir="${build.dir}/${project.name}/WEB-INF/classes/res">
        <fileset dir="${res.dir}/common" />
        <fileset dir="${res.dir}/${project.name}" />
    </copy>
  </target>

  <target name="build-war" depends="build-package">
    <echo>Creating the WAR deployment file</echo>
    <war destfile="${war.path}" webxml="${build.dir}/${project.name}/WEB-INF/web.xml">
      <fileset dir="${build.dir}/${project.name}" />
    </war>
  </target>

  <target name="tomcat-deploy" depends="build-war, tomcat-remove">
    <echo>Deploying WAR file to tomcat</echo>
    <deploy url="${tomcat.url}"
            username="${tomcat.user}"
            password="${tomcat.pass}"
            path="/${project.name}"
            war="${war.abs.path}" />
  </target>

  <target name="tomcat-reload">
    <reload url="${tomcat.url}"
            username="${tomcat.user}"
            password="${tomcat.pass}"
            path="/${project.name}" />
  </target>

  <target name="tomcat-remove">
    <undeploy failonerror="false"
              url="${tomcat.url}"
              username="${tomcat.user}"
              password="${tomcat.pass}"
              path="/${project.name}" />
  </target>
</project>